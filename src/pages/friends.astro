---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Friends">
  <h2>Friends</h2>
  <p>Shoutouts to these awesome people. I love you all.</p>

  <div id="canvas"></div>
</BaseLayout>

<style lang="sass">
  #canvas
    width: unset !important

  :global(#special)
    position: absolute
    left: 50%
    border: 3px solid transparent
    border-radius: 999999px

    :global(.dark) &
      background: #222

    :global(.light) &
      background: #f1f3f5
</style>

<script>
  import * as mg from "mingine-engine";
  import frens from "../frens.json";

  // randomize names
  for (let i = frens.n.length - 1; i > 0; i--) {
    const j = ~~(Math.random() * (i + 1));
    [frens.n[i], frens.n[j]] = [frens.n[j], frens.n[i]];
  }

  // parameters
  const PROFILE_PICTURE_RADIUS = 0.09; // m
  const MAX_CANVAS_SIZE = 600; // px
  const ROTATION_SPEED = 0.02 * 2 * Math.PI; // rad / s
  const SPRING_CONSTANT = 4; // N / m
  const RADIUS = 0.35; // m
  const REPULSION_STREGTH = .1;
  const REPULSION_MAX = 10;

  // globals
  let mousePos : mg.Vec2 | undefined;
  let lines : HTMLDivElement | undefined;
  const canvas = document.getElementById("canvas")!;

  // implementation of the profile pic object
  const createProfilePic = (id: string, initRot: number, img: string, col: string) => {
    let rotation = initRot;

    const circle = mg.createCircle({
      id,
      radius: PROFILE_PICTURE_RADIUS, // m
      momentOfInertia: 0, // this is ignored anyway
      mass: 1, // kg

      angle: 0,
      angVelocity: 0,
      angAccel: 0,

      collide: true,

      // @ts-expect-error
      pos: mg.vAngle(Math.random() * 2 * Math.PI, Math.random() * RADIUS * 1.5),

      styles: {
        border: `3px solid ${col}`,
        "border-radius": "999px",
        "box-sizing": "border-box",
        background: `url(${img})`,
        "background-size": "contain",
        "z-index": 2
      },

      forces: [
        (simulation) => {
          const [, tStep] = simulation;

          rotation += tStep * ROTATION_SPEED;

          // we have to construct a new force model every time as we change the target position
          // Mingine models are stable and un-stateful and so this should work just fine
          return mg.forceModels.spring(
            SPRING_CONSTANT,
            // @ts-expect-error I forgot to put vAngle in the type defs
            mg.vAngle(rotation, RADIUS),
            mg.vo()
          )(simulation);
        },

        ([physObj]) => {
          if (!mousePos) return [mg.vo(), 0];

          const relativePos = physObj.pos.sub(mousePos);
          const amount = Math.min(REPULSION_STREGTH / relativePos.len(), REPULSION_MAX);
          return [relativePos.norm().scale(amount), 0];
        },

        mg.forceModels.simpleDamping(2, 1),
      ],
    });

    circle.physicsObj.momentOfInertia = Infinity; // rotation is impossible - mingine bug :(
    return circle;
  };

  // construct engine
  const engine = mg.createEngine(
    mg.createScene({
      // canvas from -1/2 to 1/2
      canvasSize: mg.v(1, 1),
      renderOffset: mg.v(-0.5, -0.5),
      scale: 1,

      rootStyles: {
        "margin": "0 auto",
        "max-width": "600px",
      },

      objects: frens.n.map((fren, i) => createProfilePic(`fren_${i}`, 2 * Math.PI * i / (frens.n.length), fren[0], fren[1])),

      postTickHooks: [
        ([scene]) => {
          if (!lines || !lines.isConnected) {
            lines = document.createElement("div");
            canvas.append(lines);
            //lines.style.cssText = "position: absolute; left: 50%; top: 50%; z-index: 1; position: relative"
          }

          const children = scene.getObjects().map((o, i) => {
            const center = o.physicsObj.pos.scdiv(2).scale(canvas.clientWidth);
            const len = o.physicsObj.pos.len() * canvas.clientWidth;
            let rot = o.physicsObj.pos.angleTo(mg.v(1, 0));
            const col = frens.n[i][1];

            // fun adjustments
            if (center.y > 0) rot = Math.PI - rot;

            const el = document.createElement("div");
            Object.assign(el.style, {
              transform: `translate(${center.x - (len/2)}px, ${-center.y}px) rotate(${rot}rad)`,
              width: `${len}px`,
              borderTop: `1px solid ${col}`,
              position: "absolute",
              top: "50%",
              left: "50%"
            });

            return el;
          });

          lines.replaceChildren(...children);
        }
      ]
    })
  );

  engine.mount(canvas);

  engine.start({ lockPhysicsToRender: true });
  window["engine"] = engine;

  // resize observer
  const fix = () => {
      engine.scene.scale = Math.min(canvas.clientWidth, MAX_CANVAS_SIZE)

      for (const o of engine.scene.getObjects()) {
        const s = o.styles as any;
        s.width = s.height = engine.scene.scale * PROFILE_PICTURE_RADIUS * 2 + "px";
      }
    };
  new ResizeObserver(fix).observe(canvas);

  canvas.onmousemove = (ev) => {
    const bounds = canvas.getBoundingClientRect();
    mousePos = mg.v(ev.x - bounds.left, bounds.height - (ev.y - bounds.top)).scdiv(bounds.height).sub(mg.v(0.5, 0.5));
  }
  canvas.onmouseleave = () => mousePos = undefined;
  canvas.ontouchend = () => mousePos = undefined;
</script>
