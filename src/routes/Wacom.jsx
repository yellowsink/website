import Code from "../components/Code";
import gui1 from "../assets/wacom_screenshots/gui_1.png"
import gui2 from "../assets/wacom_screenshots/gui_2.png"
import gui3 from "../assets/wacom_screenshots/gui_3.png"
import tui from "../assets/wacom_screenshots/tui.png"

export default () => (
    <>
        <h2 class="text-3xl">WacomAreaX11</h2>
        <p class="text-lg">A delightful GUI for setting up tablets on Linux, with an equally delightful TUI to match.</p>

        <h3 class="text-2xl mt-4">Why?</h3>
        <p>
            At first glance, setting tablet areas in Wacom drivers may not seem like an issue -
            here's a reasonable example:
            <Code>xsetwacom set 13 Area 2000 3000 6800 6800</Code>
            This code sets device 13's area to 20mm from left, 30mm from top, 48mm wide, and 38mm high.
        </p>
        <p class="mt-2">
            However, what happens when we add rotation in the mix?
            <Code>
                xsetwacom set 13 Area 5460 1868 7597 5668{"\n"}
                xsetwacom set 13 Rotate ccw
            </Code>

            Now this is significantly less readable!
            This is the actual area I use on my tablet for playing osu!, and it gets very confusing to work out.
        </p>
        <p class="mt-2 font-bold">
            Why work this out manually when I can write a full front-end to xsetwacom instead?
        </p>

        <h3 class="text-2xl mt-4">Truly wonderful presets</h3>
        <p>
            Most tablet driver tools require loading presets into the software itself.
            While both the TUI and GUI will list available presets and allow loading them easily,
            This is completely redundant as long as the user is either comfortable on the command line,
            or their file manager can run shell scripts.
        </p>
        <p class="mt-2">
            Long story short, this tool saves its presets as executable shell scripts.
            Here's an example - the aformetioned tablet area I use for osu!.
            <Code file="~/tabletconfigs/osu.sh">
#!/bin/sh{"\n"}
# This file was generated by WacomAreaX11{"\n"}
# https://github.com/yellowsink/WacomAreaX11{"\n"}
xsetwacom set "Wacom Bamboo Pen Pen stylus" Area 5460 1868 7597 5668{"\n"}
xsetwacom set "Wacom Bamboo Pen Pen stylus" Rotate Ccw{"\n"}
xsetwacom set "Wacom Bamboo Pen Pen stylus" RawSample 1 
            </Code>
        </p>

        <h3 class="text-2xl mt-4">Screenshots</h3>
        <div class="grid grid-cols-2 gap-2 <lg:grid-cols-1">
            <img src={gui1} />
            <img src={gui2} />
            <img src={gui3} />
            <img src={tui} />
        </div>

        <h3 class="text-2xl mt-4">How do I get it?</h3>
        <p>
            .NET 5 SDK is required to build.
            Runtime dependencies are the xsetwacom CLI tool, and MS fonts for the GUI.
        </p>
        <p class="mt-2">
            If you're on Arch, use the AUR package - wacomareax11-git, note that this depends on ttf-win10-auto, though.
        </p>
        <p class="mt-2">
            Else just clone and build like any other .NET app.
            The CLI tool should be installed to path as wacomareax11
            and the GUI as wacomareax11_gui.
        </p>

        <h3 class="text-2xl mt-4">Wayland support?</h3>
        <p>
            This tool DOES NOT support Wayland, mainly because xsetwacom does not.
            This is because xwayland, while it does forward the tablets from libinput to X clients,
            does not forward all the special attributes specific to the xf86-input-wacom driver,
            therefore the tablet cannot be configured from inside xwayland clients.
        </p>
        <p class="mt-2">
            As for libinput control tools to use in place of xsetwacom, there currently are none. :(
            The only tools that control tablets via libinput are (as far as I can find) in the form of KDE settings modules.
        </p>
        <p class="mt-2">
            How do I use my tablet on Wayland then? Do I need to go back to X?
            Simple: use <a href="https://opentabletdriver.net/">OpenTabletDriver</a>.
            (Top tip: if it doesn't work, fix your perms with the following, and note that I have been unable to get the systemd service to work)
            <Code>sudo chmod 0666 /dev/uinput</Code>
        </p>
    </>
);