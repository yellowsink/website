---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Yotei">
  <div style="z-index: 1; position: relative">
    <h1>予定 Yotei</h1>

    <em>A task scheduler for the modern era</em>

    <h2>Task scheduler?</h2>
    <p>
      To the average computer user, scheduling things to run regularly may not
      be something you would do. Hell, even more technical computer users
      probably don't think about it - so why build a new task scheduler?
    </p>

    <p>
      Well, for a start, high uptime servers / mainframes often have regular
      cleanup or maintenance tasks to run every so often - this is what the
      classic UNIX cron daemon is for.
    </p>
    <p>
      And let's take the example that sparked the creation of Yotei - clearing
      out my package manager cache. As I kept my system up to date, the cache
      was filling with packages, often very old packages. Eventually, this grew
      to a very high proportion of my disk usage.
    </p>

    <h2>What's wrong with cron?</h2>
    <p>
      cron is designed to run tasks regularly while it is running. I wonder what
      it does if it's <em>not</em> running?
    </p>
    <p>It just drops the task.</p>
    <p>
      So if I set a monthly task to clear out the folder, and my system was shut
      down, it'd just not run that month, I guess. Too bad.
    </p>

    <h2>What's new with Yotei?</h2>
    <p>
      Firstly, the core issue of tasks that should've ran whilst offline. Yotei
      provides a solution to this via a config option on the task. Tasks can be
      set to either drop like cron, run once Yotei restarts if a run was missed,
      or, if your task depends on running exactly the right amount of times, to
      run for each time the task should've ran on Yotei's next start.
    </p>
    <p>
      Second, config. Yotei features a yaml-based config format that is very
      easy and very flexible. Yotei is easier to config than cron, and provides
      more flexibility.
    </p>
    <p>
      Third, a user friendly interface. The <code>yoteictl</code> command provides
      a comfortable command line interface for Yotei, and is the preferred way to
      configure Yotei (manually configuring tasks should only be done while the daemon
      is offline, by the way).
    </p>
    <p>
      Fourth, user mode. Perhaps you are running on a system where you do not
      have the relevant permissions to run Yotei or cron as root, or cannot
      configure the tasks, and the system admin cannot be persuaded to give you
      those permissions. No problem! Yotei can run as a regular user account.
    </p>

    <h2>And a lil treat for homebrewing sysadmins...</h2>
    <p>
      Have you ever come across a script that does some horrid things with GNU
      Screen? Just to run a task in the background, and perhaps send the output
      somewhere? Or to be able to kill it later?
    </p>
    <p>
      I have seen these sort of things with the wonderful kind of sysadmin
      who will roll their own scripts for supervising things,
      or perhaps for deploying to a bare metal server automatically over ssh.
    </p>
    <p>
      A lot of those screen-based scripts range from obtuse to disgusting. There must
      be a better way.
    </p>
    <p>
      Yotei aims to also provide that better way! A careful eye is kept on scope
      creep - Yotei is not a multiplexer and, at least initially, attaching to a
      task's stdin and using it as if it was a normal process is out of scope.
    </p>
    <p>
      Simply fire off a supervised command with <code>yoteictl</code>, list
      running supervised tags you have permissions to manage, kill them, specify
      where you want to send logs and if you want to annotate them (Yotei can
      intelligently name log files, cleanup old logs, etc).
    </p>

    <h2>Can I use it and where do I get it?</h2>
    <p>
      Yotei is built for Linux, and currently is only supported there.
      Once stable, I will look into a MacOS port, since it is relatively similar (its a BSD!)
    </p>
    <p>
      Windows support is probably off the table.
      It's not impossible, but you Windows users already have a decent enough task scheduler!
    </p>
    <p>
      Once a point-release is out, packages will be released for various Linuxes,
      but for now you will have to build from source yourself.
    </p>
    <p>
      Obtain the source code from <a href="https://github.com/yellowsink/yotei">GitHub</a>,
      navigate to the <code>daemon</code> or <code>ctl</code> directory,
      and (with the D toolchain installed), run <code>dub build -b release --compiler ldc</code>.
    </p>
  </div>

  <svg
    id="yotei-bg"
    version="1.1"
    viewBox="0 0 20 9.761"
    xmlns="http://www.w3.org/2000/svg"
    ><g
      transform="matrix(.98516 0 0 .98516 -14.649 -16.308)"
      fill="none"
      stroke="#000"
      stroke-width=".05"
      aria-label="予定"
      ><path
        d="m17.364 19.144c0.9525 0.39158 2.159 0.9525 3.0586 1.4076h-5.5033v0.762h4.3921v4.0217c0 0.15875-0.0635 0.20108-0.254 0.21167-0.21167 0.01058-0.93133 0.01058-1.6616-0.01058 0.11642 0.22225 0.254 0.53975 0.29633 0.77258 0.93133 0 1.5557-0.01058 1.9262-0.13758 0.381-0.10583 0.508-0.33866 0.508-0.8255v-4.0322h3.0268c-0.39158 0.62441-0.85725 1.2488-1.2594 1.6722l0.65616 0.39158c0.64558-0.635 1.3335-1.6616 1.8944-2.5929l-0.635-0.28575-0.14817 0.05292h-2.1802l0.16933-0.26458c-0.30692-0.15875-0.70908-0.35983-1.1536-0.56092 0.96308-0.60325 2.0214-1.4076 2.7622-2.159l-0.5715-0.43392-0.17992 0.04233h-6.5934v0.74083h5.8208c-0.58208 0.508-1.3441 1.0583-2.0214 1.4499-0.66675-0.28575-1.3547-0.58208-1.9262-0.81491z"
      ></path><path
        d="m27.291 21.504c-0.22225 1.9262-0.80433 3.4396-1.9791 4.3497 0.1905 0.127 0.51858 0.40217 0.65616 0.53975 0.68791-0.60325 1.2065-1.4076 1.5769-2.3812 0.97366 1.8097 2.5506 2.1802 4.7625 2.1802h2.4765c0.03175-0.23283 0.17992-0.61383 0.29633-0.80433-0.51858 0.01058-2.3389 0.01058-2.7305 0.01058-0.61383 0-1.1959-0.03175-1.7145-0.127v-2.159h3.1538v-0.74083h-3.1538v-1.7674h2.7199v-0.762h-6.1806v0.762h2.6352v4.445c-0.86783-0.3175-1.5346-0.93133-1.9579-2.0426 0.10583-0.43392 0.20108-0.91016 0.26458-1.4076zm-1.4817-3.683v2.3072h0.78316v-1.5557h7.2496v1.5557h0.81491v-2.3072h-4.0217v-1.2171h-0.83608v1.2171z"
      ></path>
    </g>
  </svg>
</BaseLayout>

<style lang="sass">
  @keyframes strokemove
    from
      stroke-dashoffset: 0
    to
      stroke-dashoffset: 8

  #yotei-bg
    stroke-dasharray: 3 5
    animation: strokemove 10s linear infinite
    position: absolute
    top: 5rem
    left: -15rem
    right: -20rem
    opacity: 0.1

    :global(.dark) &
      opacity: 0.05

    & > g
      transition: stroke 150ms, opacity 150ms

      :global(.dark) &
        stroke: #FFF

  :global(#content)
    position: relative
    overflow: hidden
</style>
